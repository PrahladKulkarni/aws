{
  "Comment": "This state machine implements a product price update approval workflow.",
  "StartAt": "Validate Environment",
  "States": {
    "Validate Environment": {
      "Comment": "Check the correct environment reference.",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.MyData.environment",
          "StringEquals": "QA",
          "Next": "Select QA"
        },
        {
          "Variable": "$.MyData.environment",
          "StringEquals": "PRODUCTION",
          "Next": "Select PRODUCTION"
        }
      ],
      "Default": "Invalid Environment"
    },
    "Select QA": {
      "Comment": "Selects a DynamoDB table name for the QA environment.",
      "Type": "Pass",
      "Result": {
        "table": "ProductCatalog-QA"
      },
      "ResultPath": "$.DynamoDBInput",
      "Next": "Fetch Product"
    },
    "Select PRODUCTION": {
      "Comment": "Selects a DynamoDB table name for the PRODUCTION environment.",
      "Type": "Pass",
      "Result": {
        "table": "ProductCatalog"
      },
      "ResultPath": "$.DynamoDBInput",
      "Next": "Fetch Product"
    },
    "Invalid Environment": {
      "Type": "Pass",
      "Result": {
        "Error": "An invalid environment is specified in the execution input. Valid entries: 'QA', 'PRODUCTION'."
      },
      "ResultPath": "$.Error",
      "Next": "Notify on Error"
    },
    "Fetch Product": {
      "Comment": "This task is an example of a direct call to DynamoDB API. It simply tries to fetch an Item element from the DynamoDB response. Notice the 'TableName.$:' syntax. Appending .$ to the parameter name tells Step Functions to expect a path.",
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName.$": "$.DynamoDBInput.table",
        "Key": {
          "Id": {
            "N.$": "$.MyData.productId"
          }
        },
        "ProjectionExpression": "Id",
        "ReturnConsumedCapacity": "TOTAL"
      },
      "TimeoutSeconds": 5,
      "ResultPath": "$.DynamoDBOutput",
      "Catch": [
        {
          "ErrorEquals": [
            "DynamoDB.AmazonDynamoDBException"
          ],
          "ResultPath": "$.Error",
          "Next": "Notify on Error"
        }
      ],
      "Next": "Validate Product"
    },
    "Validate Product": {
      "Comment": "Checks if the DynamoDB response contains an Item element. If present, it implies the product exists in the given environment",
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DynamoDBOutput.Item",
          "IsPresent": true,
          "Next": "Lookup Data"
        }
      ],
      "Default": "Invalid Product"
    },
    "Invalid Product": {
      "Type": "Pass",
      "Result": {
        "Error": "The specified product doesn't exist in the specified  environment."
      },
      "ResultPath": "$.Error",
      "Next": "Notify on Error"
    },
    "Lookup Data": {
      "Comment": "The reason we use InputPath here is to filter out the output from the previous task. It will be effectively removed from the state machine data. A similar result could be achieved by using OutputPath in the pervious task, but is that case we wouldn't be able to visually inspect the GetItem output.",
      "Type": "Parallel",
      "InputPath": "$.MyData",
      "ResultPath": "$.MyData.computed",
      "OutputPath": "$.MyData",
      "Branches": [
        {
          "StartAt": "Get Current Price",
          "States": {
            "Get Current Price": {
              "Comment": "The ResultSelector picks out the specific attribute we need from the result.",
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-west-2:691995883950:function:ProductCatalog-GetProduct",
              "ResultSelector": {
                "currentPrice.$": "$.Price"
              },
              "ResultPath": "$.output",
              "OutputPath": "$.output",
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Items Sold",
          "States": {
            "Get Items Sold": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-west-2:691995883950:function:ProductCatalog-ItemsSold",
              "ResultPath": "$.output.itemsSold",
              "OutputPath": "$.output",
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "ValueError"
          ],
          "ResultPath": "$.Error",
          "Next": "Notify on Error"
        }
      ],
      "Next": "Request Approval"
    },
    "Request Approval": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Comment": "We set the ResultPath to null here to discard the result of sending the SNS notification and keep the original input.",
      "Parameters": {
        "TopicArn": "arn:aws:sns:us-west-2:691995883950:DevTopic",
        "Message.$": "States.Format('A price change approval requested for the product {} in the amount of ${}.', $.productId, $.price)",
        "MessageAttributes": {
          "approval_request": {
            "DataType": "String",
            "StringValue": "true"
          }
        }
      },
      "ResultPath": null,
      "Next": "Wait For Approval"
    },
    "Wait For Approval": {
      "Type": "Task",
      "Resource": "arn:aws:states:us-west-2:691995883950:activity:PriceUpdateApproval",
      "TimeoutSeconds": 30,
      "Parameters": {
        "data.$": "$"
      },
      "ResultPath": "$.approval",
      "OutputPath": "$",
      "Next": "Approved?"
    },
    "Approved?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.approval.approved",
          "BooleanEquals": true,
          "Next": "Update Price"
        },
        {
          "Variable": "$.approval.approved",
          "BooleanEquals": false,
          "Next": "Notify on Completion"
        }
      ]
    },
    "Update Price": {
      "Type": "Task",
      "Comment": "We set the ResultPath to null here to discard the result of Lambda function invocation and keep the original input.",
      "Resource": "arn:aws:lambda:us-west-2:691995883950:function:ProductCatalog-UpdatePrice",
      "ResultPath": null,
      "Catch": [
        {
          "ErrorEquals": [
            "ValueError"
          ],
          "ResultPath": "$.Error",
          "Next": "Notify on Error"
        }
      ],
      "Next": "Notify on Completion"
    },
    "Notify on Error": {
      "Comment": "We use this task as a universal exception handler. It expects an Error attribute in the input.",
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:us-west-2:691995883950:DevTopic",
        "Message.$": "$.Error"
      },
      "End": true
    },
    "Notify on Completion": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:us-west-2:691995883950:DevTopic",
        "Message.$": "$.approval.message"
      },
      "Comment": "We set the ResultPath to null here to discard the result of sending the SNS notification and keep the original input.",
      "ResultPath": null,
      "End": true
    }
  }
}